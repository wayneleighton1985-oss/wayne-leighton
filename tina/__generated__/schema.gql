# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  books(relativePath: String): Books!
  booksConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BooksFilter): BooksConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  footer(relativePath: String): Footer!
  footerConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FooterFilter): FooterConnection!
}

input DocumentFilter {
  books: BooksFilter
  pages: PagesFilter
  footer: FooterFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Books | Pages | Footer | Folder

type Books implements Node & Document {
  title: String!
  author: String!
  description: JSON!
  format: String!
  price: Float!
  coverImageUrl: String!
  category: String!
  publishedYear: Float!
  pages: Float!
  isbn: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooksFilter {
  title: StringFilter
  author: StringFilter
  description: RichTextFilter
  format: StringFilter
  price: NumberFilter
  coverImageUrl: ImageFilter
  category: StringFilter
  publishedYear: NumberFilter
  pages: NumberFilter
  isbn: StringFilter
  body: RichTextFilter
}

type BooksConnectionEdges {
  cursor: String!
  node: Books
}

type BooksConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BooksConnectionEdges]
}

type PagesHeroPrimaryButton {
  text: String!
  url: String!
}

type PagesHeroSecondaryButton {
  text: String!
  url: String!
}

type PagesHero {
  logoUrl: String
  logoAlt: String
  primaryButton: PagesHeroPrimaryButton
  secondaryButton: PagesHeroSecondaryButton
}

type PagesFeaturedBooksViewAllButton {
  text: String!
  url: String!
}

type PagesFeaturedBooks {
  title: String!
  description: String!
  viewAllButton: PagesFeaturedBooksViewAllButton
}

type PagesAboutLearnMoreButton {
  text: String!
  url: String!
}

type PagesAbout {
  imageUrl: String
  imageAlt: String
  learnMoreButton: PagesAboutLearnMoreButton
}

type PagesTestimonialsItems {
  quote: String!
  author: String!
  rating: Float!
}

type PagesTestimonials {
  title: String!
  description: String!
  items: [PagesTestimonialsItems]
}

type PagesQuickFacts {
  title: String!
  countriesVisited: String!
  yearsAsNomad: String!
  booksPublished: String!
  legalCasesWon: String!
}

type Pages implements Node & Document {
  title: String!
  description: String!
  hero: PagesHero
  featuredBooks: PagesFeaturedBooks
  about: PagesAbout
  testimonials: PagesTestimonials
  quickFacts: PagesQuickFacts
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesHeroPrimaryButtonFilter {
  text: StringFilter
  url: StringFilter
}

input PagesHeroSecondaryButtonFilter {
  text: StringFilter
  url: StringFilter
}

input PagesHeroFilter {
  logoUrl: StringFilter
  logoAlt: StringFilter
  primaryButton: PagesHeroPrimaryButtonFilter
  secondaryButton: PagesHeroSecondaryButtonFilter
}

input PagesFeaturedBooksViewAllButtonFilter {
  text: StringFilter
  url: StringFilter
}

input PagesFeaturedBooksFilter {
  title: StringFilter
  description: StringFilter
  viewAllButton: PagesFeaturedBooksViewAllButtonFilter
}

input PagesAboutLearnMoreButtonFilter {
  text: StringFilter
  url: StringFilter
}

input PagesAboutFilter {
  imageUrl: StringFilter
  imageAlt: StringFilter
  learnMoreButton: PagesAboutLearnMoreButtonFilter
}

input PagesTestimonialsItemsFilter {
  quote: StringFilter
  author: StringFilter
  rating: NumberFilter
}

input PagesTestimonialsFilter {
  title: StringFilter
  description: StringFilter
  items: PagesTestimonialsItemsFilter
}

input PagesQuickFactsFilter {
  title: StringFilter
  countriesVisited: StringFilter
  yearsAsNomad: StringFilter
  booksPublished: StringFilter
  legalCasesWon: StringFilter
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  hero: PagesHeroFilter
  featuredBooks: PagesFeaturedBooksFilter
  about: PagesAboutFilter
  testimonials: PagesTestimonialsFilter
  quickFacts: PagesQuickFactsFilter
  body: RichTextFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type FooterSocialMedia {
  twitter: String
  facebook: String
  linkedin: String
}

type FooterFacebookGroup {
  title: String!
  description: String!
  url: String!
  buttonText: String!
}

type Footer implements Node & Document {
  title: String!
  companyName: String!
  description: String!
  copyrightYear: Float!
  copyrightText: String!
  socialMedia: FooterSocialMedia
  facebookGroup: FooterFacebookGroup
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input FooterSocialMediaFilter {
  twitter: StringFilter
  facebook: StringFilter
  linkedin: StringFilter
}

input FooterFacebookGroupFilter {
  title: StringFilter
  description: StringFilter
  url: StringFilter
  buttonText: StringFilter
}

input FooterFilter {
  title: StringFilter
  companyName: StringFilter
  description: StringFilter
  copyrightYear: NumberFilter
  copyrightText: StringFilter
  socialMedia: FooterSocialMediaFilter
  facebookGroup: FooterFacebookGroupFilter
}

type FooterConnectionEdges {
  cursor: String!
  node: Footer
}

type FooterConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FooterConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateBooks(relativePath: String!, params: BooksMutation!): Books!
  createBooks(relativePath: String!, params: BooksMutation!): Books!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateFooter(relativePath: String!, params: FooterMutation!): Footer!
  createFooter(relativePath: String!, params: FooterMutation!): Footer!
}

input DocumentUpdateMutation {
  books: BooksMutation
  pages: PagesMutation
  footer: FooterMutation
  relativePath: String
}

input DocumentMutation {
  books: BooksMutation
  pages: PagesMutation
  footer: FooterMutation
}

input BooksMutation {
  title: String
  author: String
  description: JSON
  format: String
  price: Float
  coverImageUrl: String
  category: String
  publishedYear: Float
  pages: Float
  isbn: String
  body: JSON
}

input PagesHeroPrimaryButtonMutation {
  text: String
  url: String
}

input PagesHeroSecondaryButtonMutation {
  text: String
  url: String
}

input PagesHeroMutation {
  logoUrl: String
  logoAlt: String
  primaryButton: PagesHeroPrimaryButtonMutation
  secondaryButton: PagesHeroSecondaryButtonMutation
}

input PagesFeaturedBooksViewAllButtonMutation {
  text: String
  url: String
}

input PagesFeaturedBooksMutation {
  title: String
  description: String
  viewAllButton: PagesFeaturedBooksViewAllButtonMutation
}

input PagesAboutLearnMoreButtonMutation {
  text: String
  url: String
}

input PagesAboutMutation {
  imageUrl: String
  imageAlt: String
  learnMoreButton: PagesAboutLearnMoreButtonMutation
}

input PagesTestimonialsItemsMutation {
  quote: String
  author: String
  rating: Float
}

input PagesTestimonialsMutation {
  title: String
  description: String
  items: [PagesTestimonialsItemsMutation]
}

input PagesQuickFactsMutation {
  title: String
  countriesVisited: String
  yearsAsNomad: String
  booksPublished: String
  legalCasesWon: String
}

input PagesMutation {
  title: String
  description: String
  hero: PagesHeroMutation
  featuredBooks: PagesFeaturedBooksMutation
  about: PagesAboutMutation
  testimonials: PagesTestimonialsMutation
  quickFacts: PagesQuickFactsMutation
  body: JSON
}

input FooterSocialMediaMutation {
  twitter: String
  facebook: String
  linkedin: String
}

input FooterFacebookGroupMutation {
  title: String
  description: String
  url: String
  buttonText: String
}

input FooterMutation {
  title: String
  companyName: String
  description: String
  copyrightYear: Float
  copyrightText: String
  socialMedia: FooterSocialMediaMutation
  facebookGroup: FooterFacebookGroupMutation
}

schema {
  query: Query
  mutation: Mutation
}
